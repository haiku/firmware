#!/bin/bash

# Compile u-boot for a bunch of devices we want and
# keep detailed records of where the code came from.

TARGET_ARCH=$1
BOARD=$2
COMMIT=$3

if [ ! -n "$TARGET_ARCH" ]; then
	echo "Usage: $0 <arch> [board] [commit]"
	exit 1
fi

### Locate acceptible cross-compiler toolchain
TOOLCHAIN_ARCH=$TARGET_ARCH
CROSS_TOOL_PREFIX=""
# Alias arm64 == aarch64
if [ "$TARGET_ARCH" == "arm64" ]; then
	TOOLCHAIN_ARCH=aarch64
fi
if [ $(uname -m) == $TOOLCHAIN_ARCH ]; then
	echo "Native architecture build"
	CROSS_TOOL_PREFIX=""
	if ! [ -x "$(command -v ld)" ]; then
		echo "Error: development tools not installed!"
		exit 1
	fi
else
	echo "Cross compile build"
	for i in unknown-haiku none-eabi linux-gnu elf; do
		if [ -x "$(command -v $TOOLCHAIN_ARCH-$i-ld)" ]; then
			CROSS_TOOL_PREFIX=$TOOLCHAIN_ARCH-$i-
			echo "Found $i cross compiler! ($CROSS_TOOL_PREFIX)"
			break;
		fi
	done
	if ! [ -n "$CROSS_TOOL_PREFIX" ]; then
		echo "Error: Unable to locate compatible cross-compiler in PATH!"
		exit 1
	fi
fi

CROSS_TOOL_VERSION=$(${CROSS_TOOL_PREFIX}gcc -v 2>&1 | grep "gcc version" | tail -1)

if ! [ -d "$TARGET_ARCH" ]; then
	echo "Error: Unable to locate ./$TARGET_ARCH directory!"
	exit 1
fi
echo "Beginning $TARGET_ARCH build with $CROSS_TOOL_VERSION..."

TMP="/tmp/$TARGET_ARCH-build"
GIT_REPO="git://git.denx.de/u-boot.git"

if ! [ -d "$TMP" ]; then
	echo "Cloning sources..."
	git clone $GIT_REPO $TMP
else
	echo "Pulling updates..."
	# hint: Might want to comment this out if you're git blameing on u-boot in $TMP
	git -C $TMP pull --rebase
fi

if [ $# -ge 2 ]; then
	echo "Checking out u-boot $COMMIT"
	git -C $TMP checkout $COMMIT
fi

echo "Calculating dates..."
GIT_DATE=$(git -C $TMP log -1 --format=%cd)
GIT_HASH=$(git -C $TMP log -1 --format=%H)
GIT_DESC=$(git -C $TMP describe)

echo "Locating work..."
WORK_QUEUE=$(find $TARGET_ARCH/ -mindepth 1 -type d)
if [ $# -ge 2 ]; then
	WORK_QUEUE="$TARGET_ARCH/$BOARD"
fi

for dir in $WORK_QUEUE; do
	echo "Processing $dir..."
	BUILD_CONFIG="$dir/.build"
	if [ ! -f $BUILD_CONFIG ]; then
		echo "Skipping $dir due to lack of build manifest"
		continue;
	fi

	# This could be better, but it gets the job done.
	CONFIG=$(grep "config=" $BUILD_CONFIG | cut -d "=" -f2)
	NAME=$(grep "name=" $BUILD_CONFIG | cut -d "=" -f2)
	URL=$(grep "url=" $BUILD_CONFIG | cut -d "=" -f2)
	ARTIFACTS=$(grep "artifacts=" $BUILD_CONFIG | cut -d "=" -f2)
	PRE_ENV=$(grep "preenv=" $BUILD_CONFIG | cut -d "=" -f2)
	EXTRA=$(grep "extra=" $BUILD_CONFIG | cut -d "=" -f2)
	OPENSBI_INFO=$(grep "opensbi=" $BUILD_CONFIG | cut -d "=" -f2)

	# Obtain an OpenSBI payload if requested (riscv stuff)
	if [ ! -z "$OPENSBI_INFO" ]; then
		OPENSBI_VERSION=$(echo "$OPENSBI_INFO" | cut -d'/' -f1)
		OPENSBI_PLATFORM=$(echo "$OPENSBI_INFO" | cut -d'/' -f2)

		echo "Obtaining OpenSBI $OPENSBI_VERSION for $OPENSBI_PLATFORM..."
		export OPENSBI=$(tools/obtain_sbi ${OPENSBI_VERSION} ${OPENSBI_PLATFORM})
		echo "OPENSBI ${OPENSBI} obtained."
	fi

	echo "Building $NAME..."

	# Set any pre-build environment variables if provided
	if [ ! -z "$PRE_ENV" ]; then
		# TODO: This could likely be a lot better
		for x in $PRE_ENV; do
			KEY="$(echo $x | cut -d ":" -f1)"
			VALUE="$(echo $x | cut -d ":" -f2)"
			echo "Setting ${KEY} = ${VALUE} per .build"
			export ${KEY}=${VALUE}
		done
	fi

	make -C $TMP clean
	make -C $TMP $CONFIG
	if [ $? -ne 0 ]; then
		echo "Error configuring $dir"
		continue;
	fi
	ARCH=$TARGET_ARCH CROSS_COMPILE=$CROSS_TOOL_PREFIX make -C $TMP -j2
	if [ $? -ne 0 ]; then
		echo "Error building $dir"
		continue;
	fi

	echo "Collecting artifacts..."
	FILES=""
	for x in $ARTIFACTS; do
		echo "Searching for $x..."
		find $TMP -name "$x" -exec cp -f {} $dir/ \;
		FILES="$FILES $x"
	done

	# Populate README.md
	cp tools/README.template $dir/README.md
	sed -i "s^%%URL%%^$URL^g" $dir/README.md
	sed -i "s^%%DATE%%^$(date)^g" $dir/README.md
	sed -i "s^%%GIT_REPO%%^$GIT_REPO^g" $dir/README.md
	sed -i "s^%%GIT_DATE%%^$GIT_DATE^g" $dir/README.md
	sed -i "s^%%GIT_HASH%%^$GIT_HASH^g" $dir/README.md
	sed -i "s^%%GIT_DESC%%^$GIT_DESC^g" $dir/README.md
	sed -i "s^%%BOARD%%^$NAME^g" $dir/README.md
	sed -i "s^%%FILES%%^$FILES^g" $dir/README.md
	sed -i "s^%%CONFIG%%^$CONFIG^g" $dir/README.md
	sed -i "s^%%TARGET_ARCH%%^$TARGET_ARCH^g" $dir/README.md
	sed -i "s^%%CROSS_TOOL%%^$CROSS_TOOL_PREFIX^g" $dir/README.md
	sed -i "s^%%CROSS_TOOL_VERSION%%^$CROSS_TOOL_VERSION^g" $dir/README.md
done
